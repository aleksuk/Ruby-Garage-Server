window.TODO={Models:{},Collections:{},Views:{},Routers:{},init:function(){new this.Views.TodoList({el:$(".main_container")}),new this.Views.Error({el:$(".error")})}},$(function(){"use strict";TODO.init()}),this.JST=this.JST||{},this.JST["app/scripts/templates/Error.ejs"]=function(obj){obj||(obj={});{var __t,__p="";_.escape}with(obj)__p+='<div class = "alert alert-danger">Error: '+(null==(__t=validationError)?"":__t)+" </div>";return __p},this.JST["app/scripts/templates/Task.ejs"]=function(obj){obj||(obj={});{var __t,__p="";_.escape,Array.prototype.join}with(obj)__p+='<div class = "row">\n    <div class = "col-xs-1 chek stretching">\n        <input type = "checkbox" class = "is_complete pull-right"\n        ',isComplete&&(__p+='\n           disabled = "disabled" checked = "checked"\n        '),__p+='\n        ></input>\n        <span class = "invisible">1</span>  \n    </div>\n\n    <div class = "col-xs-9 stretching">\n        <div class = "task_title" title = "'+(null==(__t=title)?"":__t)+'"> '+(null==(__t=title)?"":__t)+' </div>\n\n        <div class = "editing_menu hide">\n            <input type = "text" class = "title_field " placeholder="Title..." value = "'+(null==(__t=title)?"":__t)+'" />\n            <input type = "text" class = "deadline_field " placeholder = "Deadline..." value = "'+(null==(__t=deadline)?"":__t)+'" />\n            <button class = "btn-xs btn-primary save_title">Save</button>\n            <button class = "btn-xs btn-primary cancel_title">Cancel</button>\n        </div>\n    </div>\n\n    <div class = "col-xs-1 edit_item">\n        <div class = "stretching">\n            <span class = "glyphicon glyphicon-sort sort_task"></span>\n            <span class = "separator">|</span>\n            <span class = "glyphicon glyphicon-pencil edit_task"></span>\n            <span class = "separator">|</span>\n            <span class = "glyphicon glyphicon-trash remove_task"></span>\n            <span class = "invisible">1</span>\n        </div>\n    </div> \n</div>';return __p},this.JST["app/scripts/templates/Todo.ejs"]=function(obj){obj||(obj={});{var __t,__p="";_.escape}with(obj)__p+='<div class = "todo_header">\n    <span class = "glyphicon glyphicon-th date-icon"></span>\n\n    <div class = "todo_name"> '+(null==(__t=title)?"":__t)+' </div>\n\n    <div class = "todo_title_editing hide">\n        <input type = "text" class = "title_field" placeholder = "TODO title..." value = "'+(null==(__t=title)?"":__t)+'" />\n        <button class = "btn-xs btn-primary save_header">Save</button>\n        <button class = "btn-xs btn-primary cancel_header">Cancel</button>\n    </div>\n\n    <div class = "editing pull-right">\n        <span class = "glyphicon glyphicon-pencil edit_todo"></span>\n        <span class = "separator">|</span>\n        <span class = "glyphicon glyphicon-trash remove_todo"></span>\n    </div>\n</div>\n\n<div class = "add_task">\n    <div class = "input-group">\n        <span class = "input-group-addon plus">\n            <span class = "glyphicon glyphicon-plus"></span>\n        </span>\n\n        <input type = "text" class = "form-control new_task" placeholder = "Start typeing here to create task..." />\n\n        <span class = "input-group-addon btn_add"> Add Task </span>\n    </div>\n</div>\n\n<div class = "tasks"></div>';return __p},this.JST["app/scripts/templates/TodoList.ejs"]=function(obj){obj||(obj={});{var __p="";_.escape}with(obj)__p+='<h2 class = "proj_title _bold">SIMPLE TODO LIST</h2>\n<h4 class = "proj_title ">FROM RUBY GARAGE</h4>\n\n<div class = "content"></div>\n\n<div class = "add_todo">\n    <span class = "glyphicon glyphicon-plus"></span> Add TODO List\n</div>\n\n<div class = "copyright">\n    Â© Ruby Garage\n</div>\n';return __p},TODO.Models=TODO.Models||{},function(){"use strict";TODO.Models.Task=Backbone.Model.extend({defaults:{title:"",deadline:"",todo_id:"",isComplete:!1},validate:function(a){return a.title.trim().length<5?"The task name is too short!":void 0}})}(),TODO.Views=TODO.Views||{},function(){"use strict";TODO.Views.Task=Backbone.View.extend({template:JST["app/scripts/templates/Task.ejs"],tagName:"div",className:"task",events:{"click .remove_task":"destroy","click .edit_task":"showEditMode","click .save_title":"saveChange","click .cancel_title":"refreshChange","change .is_complete":"disableTask"},initialize:function(){this.listenTo(this.model,"change",this.render),this.listenTo(this.model,"destroy",this.removeTask),this.listenTo(this.model,"invalid",this.failedValidation)},failedValidation:function(a){Backbone.Mediator.pub("Error",a)},render:function(){return this.$el.html(this.template(this.model.toJSON())),this.findNodes(),this},findNodes:function(){this.nodes={$taskTitle:this.$(".task_title"),$editingMenu:this.$(".editing_menu"),$titleField:this.$(".title_field"),$deadlineField:this.$(".deadline_field")},this.initDatepicker()},initDatepicker:function(){this.nodes.$deadlineField.datepicker()},showEditMode:function(){this.model.get("isComplete")||(this.nodes.$taskTitle.addClass("hide"),this.nodes.$editingMenu.removeClass("hide"))},showPreviewMode:function(){this.nodes.$taskTitle.removeClass("hide"),this.nodes.$editingMenu.addClass("hide")},saveChange:function(){this.model.save({title:this.nodes.$titleField.val(),deadline:this.nodes.$deadlineField.val()}),this.refreshChange()},refreshChange:function(){this.nodes.$titleField.val(this.model.get("title")),this.nodes.$deadlineField.val(this.model.get("deadline")),this.showPreviewMode()},disableTask:function(){this.model.save("isComplete",!0)},destroy:function(){this.model.destroy()},removeTask:function(){this.nodes.$deadlineField.datepicker("destroy"),this.remove()}})}(),TODO.Collections=TODO.Collections||{},function(){"use strict";TODO.Collections.Tasks=Backbone.Collection.extend({model:TODO.Models.Task,setUrl:function(a){this.url="/todo/tasks/"+a}})}(),TODO.Models=TODO.Models||{},function(){"use strict";TODO.Models.Todo=Backbone.Model.extend({defaults:{title:"Complete the test task for Ruby Garage"},validate:function(a){return a.title.trim().length<5?"The TODO name is too short!":void 0}})}(),TODO.Collections=TODO.Collections||{},function(){"use strict";TODO.Collections.Todo=Backbone.Collection.extend({url:"/todos",model:TODO.Models.Todo})}(),TODO.Views=TODO.Views||{},function(){"use strict";TODO.Views.Todo=Backbone.View.extend({template:JST["app/scripts/templates/Todo.ejs"],tagName:"div",className:"todo_list",events:{"click .edit_todo":"showEditMode","click .remove_todo":"removeTodo","click .save_header":"savaChange","click .cancel_header":"cancelChange","click .btn_add":"addTask"},initialize:function(){this.collection=new TODO.Collections.Tasks,this.listenTo(this.model,"invalid",this.failedValidation),this.listenTo(this.model,"change",this.editHeaderTitle),this.listenToOnce(this.collection,"sync",this.renderTasks),this.listenTo(this.collection,"invalid",this.destroyFailedTask),this.collection.setUrl(this.model.id),this.collection.fetch()},render:function(){return this.$el.html(this.template(this.model.toJSON())),this},findNodes:function(){this.nodes={$tasks:this.$(".tasks"),$headerTitle:this.$(".todo_name"),$headerMenu:this.$(".todo_title_editing"),$headerField:this.$(".title_field"),$addTaskField:this.$(".new_task")}},renderTasks:function(){this.findNodes(),this.collection.each(this.renderOneTask,this),this.listenTo(this.collection,"add",this.renderOneTask)},renderOneTask:function(a){var b=new TODO.Views.Task({model:a});this.nodes.$tasks.append(b.render().el)},addTask:function(){this.collection.create({title:this.nodes.$addTaskField.val(),todo_id:this.model.id}),this.clearTaskField()},destroyFailedTask:function(a){a.destroy()},showEditMode:function(){this.nodes.$headerTitle.addClass("hide"),this.nodes.$headerMenu.removeClass("hide")},showPreviewMode:function(){this.nodes.$headerTitle.removeClass("hide"),this.nodes.$headerMenu.addClass("hide")},savaChange:function(){this.model.save("title",this.nodes.$headerField.val()),this.showPreviewMode()},cancelChange:function(){this.nodes.$headerField.val(this.model.get("title")),this.showPreviewMode()},editHeaderTitle:function(){this.nodes.$headerTitle.html(this.model.get("title"))},failedValidation:function(a){a===this.model&&this.clearHeaderInput(),Backbone.Mediator.pub("Error",a||this.model)},clearTaskField:function(){this.nodes.$addTaskField.val("")},clearHeaderInput:function(){this.nodes.$headerField.val(this.model.get("title"))},removeTodo:function(){this.collection.each(function(a){a.destroy()}),this.model.destroy(),this.remove()}})}(),TODO.Views=TODO.Views||{},function(){"use strict";TODO.Views.TodoList=Backbone.View.extend({template:JST["app/scripts/templates/TodoList.ejs"],initialize:function(){this.render(),this.$contentNode=this.$(".content"),this.listenToOnce(this.collection,"sync",this.renderTodoLists),this.collection.fetch()},collection:new TODO.Collections.Todo,events:{"click .add_todo":"createNewTodo"},render:function(){this.$el.html(this.template())},renderTodoLists:function(){this.collection.each(this.renderOneTodo,this),this.listenTo(this.collection,"add",this.renderOneTodo)},renderOneTodo:function(a){var b=new TODO.Views.Todo({model:a});this.$contentNode.append(b.render().el)},createNewTodo:function(){this.collection.create({},{wait:!0})}})}(),TODO.Views=TODO.Views||{},function(){"use strict";TODO.Views.Error=Backbone.View.extend({template:JST["app/scripts/templates/Error.ejs"],tagName:"div",className:"error",subscriptions:{Error:"showError"},render:function(a){return this.$el.html(this.template(a)),this},showError:function(a){clearInterval(this.interval),this.render(a),this.$el.removeClass("hide"),this.interval=setTimeout(this.hideError.bind(this),5e3)},hideError:function(){this.$el.addClass("hide")}})}();